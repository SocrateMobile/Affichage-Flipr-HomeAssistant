#
# Code ESPHome pour LILYGO TTGO T-Display 1.14 Pouces LCD + ESP32 Module sans Fil
# 
# Permet d'afficher les relevés de Flipr, en complément de l intégration: https://www.home-assistant.io/integrations/flipr/ 
# 
# doc et boitier imprimable en 3D : https://github.com/Xinyuan-LilyGO/TTGO-T-Display
# 
# ne pas oublier de mettre la font SFCompact.ttf ainsi que les fichier ok_logo et pb_logo 
# dans le repertoire esphome de votre home assistant

substitutions:
  devicename: affichageflipr
  frendlyname: Affichage de Flipr
  ip_device: # l ip de votre ESP TTGO
  ip_gateway: # l ip de votre box
  ip_subnet:  255.255.255.0

# indiquez ici les sensors de votre Flipr:
  entity1: sensor.flipr_XXXXXXXX_water_temperature
  entity2: sensor.flipr_XXXXXXXX_ph
  entity3: sensor.flipr_XXXXXXXX_chlorine
  
# indiquez ici les binary sensors de votre Flipr:
  entity4: binary_sensor.flipr_XXXXXXXX_chlorine_status
  entity5: binary_sensor.flipr_XXXXXXXX_ph_status
  entity6: sensor.flipr_XXXXXXXX_last_measured
  entity7: sensor.flipr_XXXXXXXX_batterie
  entity8: sensor.flipr_XXXXXXXX_ox
  icon_signal: signal

# Paramétrge de l'entité à appeler pour allumer et eteindre la lampe de la piscine
# ici un relai SonOff mini zigbee est positionné entre l arrivée secteur et la bobine de la lampe
# l'interrupteur physique à été cablé sur l entré s1 du relai pour conserver l'utilisation manuelle

#  relailampe: light.relai_cabanon_piscine_light_2
  relailampe: switch.relai_relai_entree_zb

# réglage des valeurs pour la gestion des couleurs:
  temp_mini: "26"
  temp_maxi: "31"
  ph_mini: "7"
  ph_maxi: "7.4"
  chlore_mini: "0.5"
  chlore_maxi: "3"

#
# Dans le reste du code, tout est variabilisé sur les labels de substitution
#

esphome:
  name: ${devicename}
  platform: ESP32
  board: featheresp32
#  on_boot:
#    priority: -10
#    then:

        
# Enable logging
logger:
  logs:
    component: ERROR

api:
  encryption:
    key: !secret key_display_p
ota:
  password: !secret ota_display_p

# Ici, on lance la connexion de l'ESP8266 à votre WIFI, 
# les paramètres sont à remplir plus haut, et dans le fichier secret.yaml
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

#  manual_ip:
#    static_ip: ${ip_device}
#    gateway: ${ip_gateway}
#    subnet: ${ip_subnet}

# Ici, on active le serveur WEB du ESP8266, en allant sur l'IP du ESP8266, on tombe sur une interface pour piloter les relais
web_server:
  port: 80
  auth:
    username: !secret server_username
    password: !secret server_password

captive_portal:

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blanc
    red: 100%
    green: 100%
    blue: 100%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%

image:
  - file: "alert.jpg"
    id: pb_logo
    resize: 50x50
    type: RGB24

  - file: "check-circle.jpg"
    id: ok_logo
    resize: 50x50
    type: RGB24

  - file: "piscine.png"
    id: piscine
    resize: 80x80
    type: RGB24
  - file: "ba_0.png"
    id: bat_0
    resize: 35x35
    type: RGB24
  - file: "ba_20.png"
    id: bat_20
    resize: 35x35
    type: RGB24
  - file: "ba_40.png"
    id: bat_40
    resize: 35x35
    type: RGB24
  - file: "ba_60.png"
    id: bat_60
    resize: 35x35
    type: RGB24
  - file: "ba_80.png"
    id: bat_80
    resize: 35x35
    type: RGB24
  - file: "ba_100.png"
    id: bat_100
    resize: 35x35
    type: RGB24

  - file: "bav_0.png"
    id: batv_0
    resize: 60x60
    type: RGB24
  - file: "bav_20.png"
    id: batv_20
    resize: 60x60
    type: RGB24
  - file: "bav_40.png"
    id: batv_40
    resize: 60x60
    type: RGB24
  - file: "bav_60.png"
    id: batv_60
    resize: 60x60
    type: RGB24
  - file: "bav_80.png"
    id: batv_80
    resize: 60x60
    type: RGB24
  - file: "bav_100.png"
    id: batv_100
    resize: 60x60
    type: RGB24

  - file: "piscine_on.png"
    id: piscine_on
    resize: 60x60
    type: RGB24
  - file: "piscine_off.png"
    id: piscine_off
    resize: 60x60
    type: RGB24

  - file: "lampe_on.png"
    id: ampoule_on
    resize: 30x30
    type: RGB24
  - file: "black.png"
    id: black
    resize: 30x30
    type: RGB24

font:
  - file: "SFCompact.ttf"
    id: sfcompact_38
    size: 38
    glyphs: 'éèà!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/'

  - file: "SFCompact.ttf"
    id: sfcompact_25
    size: 25
    glyphs: 'éèà!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/'

  - file: "SFCompact.ttf"
    id: sfcompact_55
    size: 55
    glyphs: 'éèà!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/'
  - file: "SFCompact.ttf"
    id: sfcompact_20
    size: 20
    glyphs: 'éèà!"%()+,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz/'

# gestion du LED interne

light:
  - platform: binary
    name: "Led interne"
    output: light_output
    id: internal_led

output:
  - id: light_output
    platform: gpio
    pin: 2

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO35
      inverted: true
    name: "Lampe Piscine"
    id: tdisplay_button_input_1

# L'autorisation d appeler un service doit etre activée dans votre Home Assistant en suivant les étapes suivantes :
# Dans votre instance Home Assistant, Accédez à Paramètres > Appareils et services > ESPHome.
# Sélectionnez l'intégration, puis sélectionnez Configurer .
# validez l autorisation

    on_click:
      then:
        - homeassistant.service:
            service: switch.toggle
            data:
              entity_id: ${relailampe}

 #      - display.page.show: my_page2
 #      - delay: 10s
 #      - display.page.show: my_page
             
 #       - light.turn_on: internal_led

  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: tdisplay_button_input_0
    name: "Bouton d'information"

    on_click:
      then:
        - display.page.show: my_page1
        - delay: 10s
        - display.page.show: my_page

  - platform: status
    name: "Etat de l'afficheur"
    id: system_status
  - platform: homeassistant
    id: statut_chlore
    name: "Statut Chlore: "
    entity_id: ${entity4}
  - platform: homeassistant
    id: statut_ph
    name: "Statut pH: "
    entity_id: ${entity5}

  - platform: homeassistant
    id: statut_lampe
    entity_id: ${relailampe}
    name: "Lampe de la piscine"

sensor:
  - platform: homeassistant
    id: temp_eau
    name: "Température de l'eau"
    entity_id: ${entity1}
    unit_of_measurement: '°C'
    accuracy_decimals: 0
    state_class: measurement
  - platform: homeassistant
    id: niveau_ph
    name: "pH : "
    entity_id: ${entity2}
    state_class: "measurement"
    accuracy_decimals: 2
    unit_of_measurement: "pH"
  - platform: homeassistant
    id: niveau_chlore
    name: "Niveau de Chlore"
    entity_id: ${entity3}
    unit_of_measurement: 'ppm'
    state_class: measurement
    accuracy_decimals: 2
  - platform: wifi_signal
    name: "Signal WiFi"
    update_interval: 60s
  - platform: uptime
    name: "En ligne depuis"
    update_interval: 60s
  - platform: homeassistant
    id: derniere_analyse
    name: "Derniere analyse: "
    entity_id: ${entity6}
    device_class: timestamp
  - platform: homeassistant
    id: bat_flipr
    name: "Batterie Flipr : "
    entity_id: ${entity7}
    state_class: "measurement"
    unit_of_measurement: "%"    
  - platform: homeassistant
    id: redox
    name: "Valeur Redox : "
    entity_id: ${entity8}
    state_class: "measurement"
    unit_of_measurement: "mV"    

# remontée concernant la batterie:
  - platform: adc
    pin: 34
    attenuation: 11db
    name: Voltage de la batterie
    id: vcc
    update_interval: 60s
    accuracy_decimals: 2
    filters:
    - multiply: 2
  - platform: copy
    source_id: vcc
    name: Niveau de la batterie
    id: batterylevel
    icon: "mdi:battery"
    unit_of_measurement: '%'
    accuracy_decimals: 0
    filters:
      - calibrate_linear:
          - 0.41 -> 0
          - 4.14 -> 100
      - lambda: |
          if (x < 0) return 0; 
          else if (x > 100) return 100;
          else return (x);
      - delta: 0.5 
      - throttle: 30s 

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "Addresse IP"
      icon: "mdi:network-outline"
    ssid:
      name: "SSID :"
      icon: "mdi:${icon_signal}"
    bssid:
      name: "BSSID :"   
      icon: "mdi:${icon_signal}"
  
time:
  - platform: homeassistant
    id: esptime

spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 90

    pages:
      - id: my_page
        lambda: |-
          bool statutchlore = statut_chlore->state;
          bool statutph = statut_ph->state;
          bool lampe = statut_lampe->state;

          float eautemp = id(temp_eau).state;
          float chloreniveau = id(niveau_chlore).state;
          float phniveau = id(niveau_ph).state;
          float batterie= id(batterylevel)->state;

          ESP_LOGD("my_page1", "lampe: %.1f%", lampe);
          ESP_LOGD("my_page1", "statutph %.1f%", statutph);
          ESP_LOGD("my_page1", "statutchlore: %.1f%", statutchlore);
          ESP_LOGD("my_page1", "eautemp: %.1f%", eautemp);
          ESP_LOGD("my_page1", "chloreniveau: %.1f%", chloreniveau);
          ESP_LOGD("my_page1", "phniveau: %.1f%", phniveau);
          ESP_LOGD("my_page1", "Battery Level: %.1f%", batterie);

          it.printf(0, 5, id(sfcompact_25), id(my_blanc), "Chlore   pH     °C");
          it.image(150, 45, id(piscine));

          if (eautemp < ${temp_mini}) {
            it.printf(150, 100, id(sfcompact_38), id(my_yellow), "%.1f", eautemp);
          }
          else if (eautemp > ${temp_maxi}) {
            it.printf(150, 98, id(sfcompact_38), id(my_red), "%.1f", eautemp);
          }
          else if (eautemp >= ${temp_mini} && eautemp <=${temp_maxi} ) {
            it.printf(150, 98, id(sfcompact_38), id(my_green), "%.1f", eautemp);

          }
          if (chloreniveau < ${chlore_mini}) {
            it.printf(0, 98, id(sfcompact_38), id(my_red), "%.1f", chloreniveau);
          }
          else if (chloreniveau > ${chlore_maxi}) {
            it.printf(0, 98, id(sfcompact_38), id(my_yellow), "%.1f", chloreniveau);
          }
          else if (chloreniveau >= ${chlore_mini} && chloreniveau <= ${chlore_maxi}){
            it.printf(0, 98, id(sfcompact_38), id(my_green), "%.1f", chloreniveau);
          }
          if (phniveau > ${ph_maxi}) {
            it.printf(80, 98, id(sfcompact_38), id(my_red), "%.1f", phniveau);
          }
          else if (phniveau < ${ph_mini}) {
            it.printf(80, 98, id(sfcompact_38), id(my_red), "%.1f", phniveau);
          }
          else if (phniveau >= ${ph_mini} && phniveau <= ${ph_maxi}) {
            it.printf(80, 98, id(sfcompact_38), id(my_green), "%.1f", phniveau);
          }
          
          
          if (statutchlore) {
          it.image(15, 47, id(pb_logo));
          }
          else {
          it.image(15, 47, id(ok_logo));
          }
             if (statutph) {
          it.image(87, 47, id(pb_logo));
          }
          else {
          it.image(87, 47, id(ok_logo));
          }
          
          if (lampe) {
          it.image(190, 10, id(ampoule_on));
          }
          else {
          it.image(190, 10, id(black));
          }

          
          if (batterie >= 90) {
              it.image(225, 10, bat_100);
          }
          else if (batterie >= 70 && batterie < 90 ) {
              it.image(225, 10, bat_80);
          }
          else if (batterie >= 50 && batterie < 70 ) {
              it.image(225, 10, bat_60);
          }
          else if (batterie >= 30 && batterie < 50 ) {
              it.image(225, 10, bat_40);
          }
          else if (batterie >= 10 && batterie < 30 ) {
              it.image(225, 10, bat_20);
          }
          else if (batterie < 10 ) {
              it.image(225, 10, bat_0);
          }



      - id: my_page1
        lambda: |-
          float redoxx = id(redox).state;
          float batflip = id(bat_flipr).state;
          float maj = id(derniere_analyse).state;
          float batterie= id(batterylevel)->state;

          ESP_LOGD("my_page1", "Battery Level: %.1f%", maj);
          
          if (batflip >= 90) {
              it.image(1, 32, batv_100);
          }
          else if (batflip >= 70 && batflip < 90 ) {
              it.image(1, 32, batv_80);
          }
          else if (batflip >= 50 && batflip < 70 ) {
              it.image(1, 32, batv_60);
          }
          else if (batflip >= 30 && batflip < 50 ) {
              it.image(1, 32, batv_40);
          }
          else if (batflip >= 10 && batflip < 30 ) {
              it.image(1, 32, batv_20);
          }
          else if (batflip < 10 ) {
              it.image(1, 32, batv_0);
          }
          it.printf(0, 5, id(sfcompact_25), id(my_blanc), "Flipr");

          it.printf(70, 0, id(sfcompact_55), id(my_blanc), "%s", id(esptime).now().strftime("%H:%M").c_str());

          it.printf(0, 60, id(sfcompact_25), id(my_blanc), "Redox: %.1f% mV", redoxx);

          it.printf(0, 85, id(sfcompact_25), id(my_blanc), "Dernier relevé:");
          it.printf(0, 110, id(sfcompact_25), id(my_green), "%.1f%", maj);

      - id: my_page2

        lambda: |-
          bool statutchlore = statut_chlore->state;
          bool lampe = statut_lampe->state;
          bool statutph = statut_ph->state;
          float batterie= id(batterylevel)->state;

          ESP_LOGD("my_page1", "lampe: %.1f%", lampe);

          if (lampe) {
          it.image(15, 47, id(piscine_on));
          }
          else {
          it.image(15, 47, id(piscine_off));
          }
             if (statutph) {
          it.image(87, 47, id(pb_logo));
          }
          else {
          it.image(87, 47, id(ok_logo));
          }
          if (batterie >= 90) {
              it.image(225, 10, bat_100);
          }
          else if (batterie >= 70 && batterie < 90 ) {
              it.image(225, 10, bat_80);
          }
          else if (batterie >= 50 && batterie < 70 ) {
              it.image(225, 10, bat_60);
          }
          else if (batterie >= 30 && batterie < 50 ) {
              it.image(225, 10, bat_40);
          }
          else if (batterie >= 10 && batterie < 30 ) {
              it.image(225, 10, bat_20);
          }
          else if (batterie < 10 ) {
              it.image(225, 10, bat_0);
          }
    


#          it.printf(0, 85, id(sfcompact_25), id(my_blanc), "Bat. ESP: %.1f%%", batterie);
#          it.printf(0, 0, id(sfcompact_25), id(my_blanc), "Derniere mise a jour:");
#          auto epochTime = maj;
#          time_t timestamp = static_cast<time_t>(epochTime);
#          struct tm *timeinfo;
#         timeinfo = gmtime(&timestamp);
#          char formattedTime[20];
#          strftime(formattedTime, sizeof(formattedTime), "%d/%m/%Y %H:%M:%S", timeinfo);
#          it.printf(0, 30, id(sfcompact_25), id(my_green), "%s", formattedTime);
#           ESPTime maj = id(derniere_analyse).state;
